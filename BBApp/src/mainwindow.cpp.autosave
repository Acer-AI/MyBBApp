#include "mainwindow.h"
#include "views/sweep_central.h"
#include "widgets/audio_dialog.h"
#include "widgets/progress_dialog.h"

#include <QFile>
#include <QSplitter>
#include <QTreeView>
#include <QMenuBar>
#include <QInputDialog>
#include <QtPrintSupport>

BBStatusBar *MainWindow::status_bar;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
      progressDialog(this)
{
    SetAppStyleSheet(DARK_STYLE_SHEET);

    setWindowTitle(tr("Broadband Spectrum Analyzer"));
    move(200, 0);
    resize(1820, 1080);

    session = new Session();

    // Side widgets have priority over top/bottom widgets
    this->setDockNestingEnabled(true);
    //this->setCorner(Qt::BottomLeftCorner, Qt::LeftDockWidgetArea);
    //this->setCorner(Qt::BottomRightCorner, Qt::RightDockWidgetArea);
    //this->setCorner(Qt::TopLeftCorner, Qt::LeftDockWidgetArea);
    //this->setCorner(Qt::TopRightCorner, Qt::RightDockWidgetArea);

    // Tab positions on the outside
    setTabPosition(Qt::RightDockWidgetArea, QTabWidget::East);
    setTabPosition(Qt::LeftDockWidgetArea, QTabWidget::West);

    sweep_panel = new SweepPanel(tr("Sweep Settings"), this,
                                 session->sweep_settings);
    sweep_panel->setObjectName("SweepSettingsPanel");
    measure_panel = new MeasurePanel(tr("Traces and Markers"), this,
                                     session->trace_manager);
    measure_panel->setObjectName("TraceMarkerPanel");
    //audio_panel = new AudioPanel(tr("Audio Settings"), this,
    //                             session->audio_settings);

    addDockWidget(Qt::RightDockWidgetArea, sweep_panel);
    addDockWidget(Qt::LeftDockWidgetArea, measure_panel);
    //addDockWidget(Qt::LeftDockWidgetArea, audio_panel);

    status_bar = new BBStatusBar();
    setStatusBar(status_bar);

    InitMenuBar();

    central_widget = new SweepCentral(this);
    setCentralWidget(central_widget);

    //RestoreState();

    connectDevice();
}

MainWindow::~MainWindow()
{
    disconnectDevice();

    delete central_widget;
    delete session;

    delete sweep_panel;
    delete measure_panel;
}

void MainWindow::closeEvent(QCloseEvent *e)
{
    //SaveState();
    QMainWindow::closeEvent(e);
}

void MainWindow::InitMenuBar()
{
    main_menu = new QMenuBar();

    // File Menu
    file_menu = main_menu->addMenu(tr("File"));
    file_menu->addAction(tr("New"));
    file_menu->addSeparator();
    file_menu->addAction(tr("Print"), this, SLOT(printView()));
    file_menu->addAction(tr("Save as .bmp"), this, SLOT(saveAsImage()));
    file_menu->addSeparator();
    file_menu->addAction(tr("Connect Device"), this, SLOT(connectDevice()));
    file_menu->addAction(tr("Disconnect Device"), this, SLOT(disconnectDevice()));
    connect(file_menu, SIGNAL(aboutToShow()),
            this, SLOT(aboutToShowFileMenu()));

    QMenu *view_menu = main_menu->addMenu(tr("View"));
    view_menu->addAction(tr("Set Title"), this, SLOT(setTitle()));
    view_menu->addAction(tr("Clear Title"), this, SLOT(clearTitle()));
    QMenu *view_color_menu = view_menu->addMenu(tr("Colors"));
    view_color_menu->addAction(tr("Load Default Colors"), this, SLOT(loadDefaultColors()));
    view_color_menu->addAction(tr("Load Printer Friendly Colors"),
                               this, SLOT(loadPrinterFriendlyColors()));
    view_color_menu->addAction(tr("Set Custom Colors"), this, SLOT(setCustomColorScheme()));
    view_color_menu->addAction(tr("Save as Default"), this, SLOT(saveAsDefaultColorScheme()));

    // Preset Menu
    preset_menu = main_menu->addMenu(tr("Presets"));

    preset_menu->addAction(tr("Load Default Settings"), this, SLOT(loadDefaultSettings()));
    preset_menu->addSeparator();
    preset_load = preset_menu->addMenu(tr("Load"));
    preset_save = preset_menu->addMenu(tr("Save"));
    preset_menu->addSeparator();
    preset_name = preset_menu->addMenu(tr("Rename"));


    for(int i = 0; i < PRESET_COUNT; i++) {
        QAction *load_action = preset_load->addAction(tr(""));
        QAction *save_action = preset_save->addAction(tr(""));
        QAction *name_action = preset_name->addAction(tr(""));

        load_action->setData(int(i));
        save_action->setData(int(i));
        name_action->setData(int(i));

        QString numeric;
        numeric.sprintf("%d", i+1);
        load_action->setShortcut(QKeySequence("Ctrl+" + numeric));
    }

    connect(preset_load, SIGNAL(triggered(QAction*)),
            this, SLOT(loadPreset(QAction*)));
    connect(preset_save, SIGNAL(triggered(QAction*)),
            this, SLOT(savePreset(QAction*)));
    connect(preset_name, SIGNAL(triggered(QAction*)),
            this, SLOT(renamePreset(QAction*)));
    connect(preset_menu, SIGNAL(aboutToShow()),
            this, SLOT(loadPresetNames()));

    // Mode Select Menu
    mode_menu = main_menu->addMenu(tr("Analysis Mode"));

    QActionGroup *mode_action_group = new QActionGroup(mode_menu);
    QAction *mode_action;
    mode_action = mode_menu->addAction(tr("Idle"));
    mode_action->setData(MODE_IDLE);
    mode_action->setCheckable(true);
    mode_action_group->addAction(mode_action);

    mode_action = mode_menu->addAction(tr("Sweep"));
    mode_action->setData(MODE_SWEEPING);
    mode_action->setCheckable(true);
    mode_action->setChecked(true);
    mode_action_group->addAction(mode_action);

    mode_action = mode_menu->addAction(tr("Real-Time"));
    mode_action->setData(MODE_REAL_TIME);
    mode_action->setCheckable(true);
    mode_action_group->addAction(mode_action);

//    mode_action = mode_menu->addAction(tr("Zero-Span"));
//    mode_action->setData(MODE_ZERO_SPAN);
//    mode_action->setCheckable(true);
//    mode_action_group->addAction(mode_action);

//    mode_action = mode_menu->addAction(tr("Time-Gate"));
//    mode_action->setData(MODE_TIME_GATE);
//    mode_action->setCheckable(true);
//    mode_action_group->addAction(mode_action);

    connect(mode_action_group, SIGNAL(triggered(QAction*)),
            this, SLOT(modeChanged(QAction*)));
    connect(mode_menu, SIGNAL(aboutToShow()),
            this, SLOT(aboutToShowModeMenu()));

    utilities_menu = main_menu->addMenu(tr("Utilities"));

    QAction *util_action = utilities_menu->addAction(tr("Audio Player"));
    connect(util_action, SIGNAL(triggered()),
            this, SLOT(startAudioPlayer()));

    connect(utilities_menu, SIGNAL(aboutToShow()), this, SLOT(aboutToShowUtilitiesMenu()));

    help_menu = main_menu->addMenu(tr("Help"));
    QAction *help_action = help_menu->addAction(tr("About"));
    connect(help_action, SIGNAL(triggered()),
            this, SLOT(showAboutBox()));

    setMenuBar(main_menu);
}

/*
 * Save the application state
 * Called in MainWindow::closeEvent()
 */
void MainWindow::SaveState()
{
    // Use .ini files in AppData folder to save settings
    //  instead of the registry, user scope
    QSettings settings(QSettings::IniFormat,
                       QSettings::UserScope,
                       "SignalHound",
                       "Layout");

    settings.setValue("MainWindow/State", saveState());
    settings.setValue("MainWindow/Geometry", geometry());
    settings.setValue("MainWindow/Maximized", isMaximized());

    //sweep_panel->SaveState(settings);
    //measure_panel->SaveState(settings);
    //audio_panel->SaveState(settings);
}

/*
 * Restore previously saved mainwindow state
 * Do nothing if the save .ini file doesn't exist
 */
void MainWindow::RestoreState()
{
    // Use .ini files in AppData folder to save settings
    //  instead of the registry, user scope
    QSettings settings(QSettings::IniFormat,
                       QSettings::UserScope,
                       "SignalHound",
                       "Layout");

    QVariant value;

    // Get widget positions
    value = settings.value("MainWindow/State");
    if(value.isValid()) {
        restoreState(value.toByteArray());
    }

    // Get window geometry
    value = settings.value("MainWindow/Geometry");
    if(value.isValid()) {
        setGeometry(value.toRect());
    }

    // Reset maximized
    value = settings.value("MainWindow/Maximized");
    if(value.isValid()) {
        if(value.toBool()) {
            showMaximized();
        }
    }

    //sweep_panel->RestoreState(settings);
    //measure_panel->RestoreState(settings);
    //audio_panel->RestoreState(settings);
}

/*
 * Hide Connect/Disconnect Device Options
 */
void MainWindow::aboutToShowFileMenu()
{
    QList<QAction*> a_list = file_menu->actions();
    if(a_list.length() <= 0) return;

    for(QAction *a : a_list) {
        if(a->text() == tr("Connect Device")) {
            a->setDisabled(session->device->IsOpen());
        }
        if(a->text() == tr("Disconnect Device")) {
            a->setDisabled(!session->device->IsOpen());
        }
    }
}

void MainWindow::aboutToShowModeMenu()
{
    int current_mode = session->sweep_settings->Mode();

    QList<QAction*> a_list = mode_menu->actions();
    for(QAction *a : a_list) {
        a->setEnabled(session->device->IsOpen());

        if(a->data() == current_mode) {
            a->setChecked(true);
        }
    }
}

void MainWindow::aboutToShowUtilitiesMenu()
{
    for(QAction *a : utilities_menu->actions()) {
        a->setEnabled(session->device->IsOpen());
    }
}

void MainWindow::OpenDeviceInThread()
{
    progressDialog.makeVisible("Opening Device\n"
                               "Estimated 3 seconds");

    session->device->OpenDevice();

    if(session->device->IsOpen()) {
        QMetaObject::invokeMethod(this, "deviceConnected", Q_ARG(bool, true));
    } else {
        QMetaObject::invokeMethod(this, "deviceConnected", Q_ARG(bool, false));
    }

    progressDialog.makeDisappear();

    return;
}

/*
 * File Menu Connect Device
 */
void MainWindow::connectDevice()
{
    //if(device_thread.joinable()) device_thread.join();
    device_thread = std::thread(&MainWindow::OpenDeviceInThread, this);
}

/*
 * File Menu Disconnect Device
 * Can also be called from the device recieving a disconnect error
 *   during normal operation
 */
void MainWindow::disconnectDevice()
{
    // Stop any sweeping
    central_widget->changeMode(BB_IDLE);

    session->device->CloseDevice();
    status_bar->UpdateDeviceInfo(tr("No Device Connected"));
}

/*
 * Preset Button Disconnect Device
 */
void MainWindow::presetDevice()
{
    
}

void MainWindow::deviceConnected(bool success)
{
    QString device_string;

    if(success) {
        device_string.sprintf("%s    sn-%d    fw-%d",
                              "BB60A", session->device->SerialNumber(), session->device->FirmwareVer());
        status_bar->UpdateDeviceInfo(device_string);
        central_widget->changeMode(BB_SWEEPING);
    } else {
        status_bar->UpdateDeviceInfo("No Device Connected");
    }

    if(device_thread.joinable()) device_thread.join();
}

void MainWindow::printView()
{
    QPrinter printer;
    printer.setOrientation(QPrinter::Landscape);

    QPrintDialog *dialog = new QPrintDialog(&printer, this);
    if(dialog->exec() != QDialog::Accepted)
        return;

    QPainter painter(&printer);
    QRect rect = painter.viewport();

    //view->render(&painter);
    QImage image;
    central_widget->GetViewImage(image);

    QSize size = image.size();
    size.scale(rect.size(), Qt::KeepAspectRatio);
    painter.setViewport(rect.x(), rect.y(),
                        size.width()-5, size.height()-5);
    painter.setWindow(image.rect());
    painter.drawImage(2, 2, image);
}

void MainWindow::saveAsImage()
{
    QString file_name = QFileDialog::getSaveFileName(this,
                                                     tr("Image Save Name"),
                                                     bb_lib::get_my_documents_path(),
                                                     tr("Images (*.png)"));
    if(file_name.isNull()) return;

    QImage image;
    central_widget->GetViewImage(image);

    image.save(file_name);
}

void MainWindow::setTitle()
{
    bool ok;
    QString new_title =
            QInputDialog::getText(this,
                                  tr("Set Title"),
                                  tr("Enter Title (Between 3-63 characters)"),
                                  QLineEdit::Normal,
                                  QString(),
                                  &ok);

    if(ok) {
        session->SetTitle(new_title);
    }
}

void MainWindow::loadDefaultColors()
{
    session->colors.LoadDefaults();
}

void MainWindow::loadPrinterFriendlyColors()
{
    session->colors.LoadPrinterFriendly();
}

void MainWindow::setCustomColorScheme()
{
    ColorPrefsDlg dlg(session->colors);

    if(dlg.exec()) {
        session->colors = dlg.GetNewColorPrefs();
    }
}

void MainWindow::saveAsDefaultColorScheme()
{

}

void MainWindow::loadDefaultSettings()
{
    central_widget->StopStreaming();
    session->LoadDefaults();
    central_widget->StartStreaming();
}

/*
 * Get user input for a new name
 * Replace the text in the .ini file
 */
void MainWindow::RenamePreset(int p)
{
    bool ok;
    QString newName =
            QInputDialog::getText(this,
                                  tr("Preset Renaming"),
                                  tr("New Name(Between 3-20 characters)"),
                                  QLineEdit::Normal,
                                  QString(),
                                  &ok);

    if(ok && (newName.length() > 2) && (newName.length() < 20)) {
        QSettings settings(QSettings::IniFormat,
                           QSettings::UserScope,
                           "SignalHound",
                           "PresetNames");

        QString key;
        key.sprintf("PresetNames/Preset%d", p + 1);
        settings.setValue(key, newName);
    }
}

void MainWindow::SetAppStyleSheet(BBStyleSheet style)
{
    QFile styleSheet;

    switch(style) {
    case DEFAULT_STYLE_SHEET:
        break;
    case LIGHT_STYLE_SHEET:
        break;
    case DARK_STYLE_SHEET:
        styleSheet.setFileName(":/style_sheet.css");
        break;
    }

    if(!styleSheet.open(QFile::ReadOnly)) {
        return;
    }

    QString styleString = styleSheet.readAll();
    styleSheet.close();

    static_cast<QApplication*>
            (QApplication::instance())->
            setStyleSheet(styleString);
}

/*
 * Slot for when the main preset file menu is about to
 *  be shown. All preset menu's share the same actions in
 *  which the text for those actions are updated here with the
 *  values found in the .ini file
 */
void MainWindow::loadPresetNames()
{
    QSettings settings(QSettings::IniFormat,
                       QSettings::UserScope,
                       "SignalHound",
                       "PresetNames");

    QString key;
    QVariant value;
    QList<QAction*> saveActions = preset_save->actions();
    QList<QAction*> loadAction = preset_load->actions();
    QList<QAction*> renameActions = preset_name->actions();

    for(int i = 0; i < PRESET_COUNT; i++) {
        key.sprintf("Preset%d", i + 1);
        value = settings.value("PresetNames/" + key);

        if(value.isValid()) {
            saveActions.at(i)->setText(value.toString());
            loadAction.at(i)->setText(value.toString());
            renameActions.at(i)->setText(value.toString());
        } else {
            saveActions.at(i)->setText(key);
            loadAction.at(i)->setText(key);
            renameActions.at(i)->setText(key);
        }
    }
}

void MainWindow::modeChanged(QAction *a)
{
    central_widget->changeMode(a->data().toInt());
}

void MainWindow::startAudioPlayer()
{
    int temp_mode = session->sweep_settings->Mode();
    central_widget->changeMode(MODE_IDLE);

    AudioDialog *dlg = new AudioDialog(session->device, session->audio_settings);

    dlg->exec();
    *session->audio_settings = *dlg->Configuration();
    delete dlg;

    central_widget->changeMode(temp_mode);
}

QString about_string =
        QWidget::tr("Signal Hound is a trademark of Test Equipment Plus\n") +
        QWidget::tr("Copyright (C) 2014\n") +
        QWidget::tr("Software Version 1.2.3\n");

void MainWindow::showAboutBox()
{
    QMessageBox::about(this, tr("About"), about_string);
}
